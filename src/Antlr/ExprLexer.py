# Generated from src/Antlr/Expr.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,10,78,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,
        4,4,4,31,8,4,11,4,12,4,32,1,5,4,5,36,8,5,11,5,12,5,37,1,6,1,6,5,
        6,42,8,6,10,6,12,6,45,9,6,1,6,1,6,1,7,1,7,1,7,4,7,52,8,7,11,7,12,
        7,53,5,7,56,8,7,10,7,12,7,59,9,7,1,7,1,7,1,8,1,8,5,8,65,8,8,10,8,
        12,8,68,9,8,1,8,1,8,1,9,4,9,73,8,9,11,9,12,9,74,1,9,1,9,0,0,10,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,1,0,5,2,0,9,9,32,32,
        8,0,9,10,13,13,34,34,39,39,59,60,62,62,96,96,124,124,2,0,10,10,39,
        39,3,0,10,10,34,34,96,96,3,0,9,10,13,13,32,32,85,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,1,21,1,0,0,0,3,23,1,
        0,0,0,5,25,1,0,0,0,7,27,1,0,0,0,9,30,1,0,0,0,11,35,1,0,0,0,13,39,
        1,0,0,0,15,48,1,0,0,0,17,62,1,0,0,0,19,72,1,0,0,0,21,22,5,59,0,0,
        22,2,1,0,0,0,23,24,5,124,0,0,24,4,1,0,0,0,25,26,5,60,0,0,26,6,1,
        0,0,0,27,28,5,62,0,0,28,8,1,0,0,0,29,31,7,0,0,0,30,29,1,0,0,0,31,
        32,1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,10,1,0,0,0,34,36,8,1,0,
        0,35,34,1,0,0,0,36,37,1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,12,
        1,0,0,0,39,43,5,39,0,0,40,42,8,2,0,0,41,40,1,0,0,0,42,45,1,0,0,0,
        43,41,1,0,0,0,43,44,1,0,0,0,44,46,1,0,0,0,45,43,1,0,0,0,46,47,5,
        39,0,0,47,14,1,0,0,0,48,57,5,34,0,0,49,56,3,17,8,0,50,52,8,3,0,0,
        51,50,1,0,0,0,52,53,1,0,0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,56,1,
        0,0,0,55,49,1,0,0,0,55,51,1,0,0,0,56,59,1,0,0,0,57,55,1,0,0,0,57,
        58,1,0,0,0,58,60,1,0,0,0,59,57,1,0,0,0,60,61,5,34,0,0,61,16,1,0,
        0,0,62,66,5,96,0,0,63,65,8,2,0,0,64,63,1,0,0,0,65,68,1,0,0,0,66,
        64,1,0,0,0,66,67,1,0,0,0,67,69,1,0,0,0,68,66,1,0,0,0,69,70,5,96,
        0,0,70,18,1,0,0,0,71,73,7,4,0,0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,
        1,0,0,0,74,75,1,0,0,0,75,76,1,0,0,0,76,77,6,9,0,0,77,20,1,0,0,0,
        9,0,32,37,43,53,55,57,66,74,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    WHITESPACE = 5
    UNQUOTED = 6
    SINGLE_QUOTED = 7
    DOUBLEQUOTED = 8
    BACKQUOTED = 9
    WS = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'|'", "'<'", "'>'" ]

    symbolicNames = [ "<INVALID>",
            "WHITESPACE", "UNQUOTED", "SINGLE_QUOTED", "DOUBLEQUOTED", "BACKQUOTED", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "WHITESPACE", "UNQUOTED", 
                  "SINGLE_QUOTED", "DOUBLEQUOTED", "BACKQUOTED", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


