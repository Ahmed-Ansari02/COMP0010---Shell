# Generated from src/Antlr/ShellGrammar.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,135,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,4,4,45,8,4,11,4,12,4,46,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,3,5,62,8,5,1,6,4,6,65,8,6,11,6,12,6,66,1,7,
        4,7,70,8,7,11,7,12,7,71,1,8,4,8,75,8,8,11,8,12,8,76,1,9,4,9,80,8,
        9,11,9,12,9,81,1,10,4,10,85,8,10,11,10,12,10,86,1,11,4,11,90,8,11,
        11,11,12,11,91,1,12,1,12,1,12,3,12,97,8,12,1,13,1,13,1,13,5,13,102,
        8,13,10,13,12,13,105,9,13,1,13,1,13,1,14,1,14,1,14,5,14,112,8,14,
        10,14,12,14,115,9,14,1,14,1,14,1,15,1,15,1,15,5,15,122,8,15,10,15,
        12,15,125,9,15,1,15,1,15,1,16,4,16,130,8,16,11,16,12,16,131,1,16,
        1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,0,17,0,19,0,21,0,23,
        0,25,0,27,8,29,9,31,10,33,11,1,0,8,2,0,9,9,32,32,9,0,9,10,13,13,
        32,32,34,34,39,39,59,60,62,62,96,96,124,124,4,0,10,10,34,34,39,39,
        96,96,2,0,10,10,39,39,2,0,10,10,34,34,2,0,10,10,96,96,3,0,10,10,
        34,34,96,96,3,0,9,10,13,13,32,32,147,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,37,1,
        0,0,0,5,39,1,0,0,0,7,41,1,0,0,0,9,44,1,0,0,0,11,61,1,0,0,0,13,64,
        1,0,0,0,15,69,1,0,0,0,17,74,1,0,0,0,19,79,1,0,0,0,21,84,1,0,0,0,
        23,89,1,0,0,0,25,96,1,0,0,0,27,98,1,0,0,0,29,108,1,0,0,0,31,118,
        1,0,0,0,33,129,1,0,0,0,35,36,5,59,0,0,36,2,1,0,0,0,37,38,5,60,0,
        0,38,4,1,0,0,0,39,40,5,62,0,0,40,6,1,0,0,0,41,42,5,124,0,0,42,8,
        1,0,0,0,43,45,7,0,0,0,44,43,1,0,0,0,45,46,1,0,0,0,46,44,1,0,0,0,
        46,47,1,0,0,0,47,10,1,0,0,0,48,49,5,101,0,0,49,50,5,99,0,0,50,51,
        5,104,0,0,51,62,5,111,0,0,52,53,5,108,0,0,53,62,5,115,0,0,54,55,
        5,103,0,0,55,56,5,114,0,0,56,57,5,101,0,0,57,62,5,112,0,0,58,59,
        5,99,0,0,59,60,5,97,0,0,60,62,5,116,0,0,61,48,1,0,0,0,61,52,1,0,
        0,0,61,54,1,0,0,0,61,58,1,0,0,0,62,12,1,0,0,0,63,65,8,1,0,0,64,63,
        1,0,0,0,65,66,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,14,1,0,0,0,
        68,70,8,2,0,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,1,
        0,0,0,72,16,1,0,0,0,73,75,8,3,0,0,74,73,1,0,0,0,75,76,1,0,0,0,76,
        74,1,0,0,0,76,77,1,0,0,0,77,18,1,0,0,0,78,80,8,4,0,0,79,78,1,0,0,
        0,80,81,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,20,1,0,0,0,83,85,
        8,5,0,0,84,83,1,0,0,0,85,86,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,
        87,22,1,0,0,0,88,90,8,6,0,0,89,88,1,0,0,0,90,91,1,0,0,0,91,89,1,
        0,0,0,91,92,1,0,0,0,92,24,1,0,0,0,93,97,3,27,13,0,94,97,3,29,14,
        0,95,97,3,31,15,0,96,93,1,0,0,0,96,94,1,0,0,0,96,95,1,0,0,0,97,26,
        1,0,0,0,98,103,5,39,0,0,99,102,3,27,13,0,100,102,3,17,8,0,101,99,
        1,0,0,0,101,100,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,104,
        1,0,0,0,104,106,1,0,0,0,105,103,1,0,0,0,106,107,5,39,0,0,107,28,
        1,0,0,0,108,113,5,34,0,0,109,112,3,29,14,0,110,112,3,19,9,0,111,
        109,1,0,0,0,111,110,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,
        114,1,0,0,0,114,116,1,0,0,0,115,113,1,0,0,0,116,117,5,34,0,0,117,
        30,1,0,0,0,118,123,5,96,0,0,119,122,3,31,15,0,120,122,3,21,10,0,
        121,119,1,0,0,0,121,120,1,0,0,0,122,125,1,0,0,0,123,121,1,0,0,0,
        123,124,1,0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,126,127,5,96,0,0,
        127,32,1,0,0,0,128,130,7,7,0,0,129,128,1,0,0,0,130,131,1,0,0,0,131,
        129,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,134,6,16,0,0,134,
        34,1,0,0,0,17,0,46,61,66,71,76,81,86,91,96,101,103,111,113,121,123,
        131,1,6,0,0
    ]

class ShellGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    WHITESPACE = 5
    APPLICATION = 6
    UNQUOTED = 7
    SINGLE_QUOTED = 8
    DOUBLE_QUOTED = 9
    BACK_QUOTED = 10
    WS = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'<'", "'>'", "'|'" ]

    symbolicNames = [ "<INVALID>",
            "WHITESPACE", "APPLICATION", "UNQUOTED", "SINGLE_QUOTED", "DOUBLE_QUOTED", 
            "BACK_QUOTED", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "WHITESPACE", "APPLICATION", 
                  "UNQUOTED", "NOT_QUOTED", "NOT_SINGLE_QUOTED", "NOT_DOUBLE_QUOTED", 
                  "NOT_BACK_QUOTED", "NOT_DOUBLE_BACK_QUOTED", "QUOTED", 
                  "SINGLE_QUOTED", "DOUBLE_QUOTED", "BACK_QUOTED", "WS" ]

    grammarFileName = "ShellGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


