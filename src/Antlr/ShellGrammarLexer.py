# Generated from src/Antlr/ShellGrammar.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,100,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,4,4,33,8,4,11,4,12,4,34,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,50,8,5,1,6,4,6,53,8,6,11,6,12,6,54,
        1,7,1,7,1,7,4,7,60,8,7,11,7,12,7,61,5,7,64,8,7,10,7,12,7,67,9,7,
        1,7,1,7,1,8,1,8,1,8,4,8,74,8,8,11,8,12,8,75,5,8,78,8,8,10,8,12,8,
        81,9,8,1,8,1,8,1,9,1,9,5,9,87,8,9,10,9,12,9,90,9,9,1,9,1,9,1,10,
        4,10,95,8,10,11,10,12,10,96,1,10,1,10,0,0,11,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,1,0,6,2,0,9,9,32,32,9,0,9,10,13,
        13,32,32,34,34,39,39,59,60,62,62,96,96,124,124,2,0,10,10,39,39,2,
        0,10,10,34,34,2,0,10,10,96,96,3,0,9,10,13,13,32,32,112,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,1,
        23,1,0,0,0,3,25,1,0,0,0,5,27,1,0,0,0,7,29,1,0,0,0,9,32,1,0,0,0,11,
        49,1,0,0,0,13,52,1,0,0,0,15,56,1,0,0,0,17,70,1,0,0,0,19,84,1,0,0,
        0,21,94,1,0,0,0,23,24,5,59,0,0,24,2,1,0,0,0,25,26,5,60,0,0,26,4,
        1,0,0,0,27,28,5,62,0,0,28,6,1,0,0,0,29,30,5,124,0,0,30,8,1,0,0,0,
        31,33,7,0,0,0,32,31,1,0,0,0,33,34,1,0,0,0,34,32,1,0,0,0,34,35,1,
        0,0,0,35,10,1,0,0,0,36,37,5,101,0,0,37,38,5,99,0,0,38,39,5,104,0,
        0,39,50,5,111,0,0,40,41,5,108,0,0,41,50,5,115,0,0,42,43,5,103,0,
        0,43,44,5,114,0,0,44,45,5,101,0,0,45,50,5,112,0,0,46,47,5,99,0,0,
        47,48,5,97,0,0,48,50,5,116,0,0,49,36,1,0,0,0,49,40,1,0,0,0,49,42,
        1,0,0,0,49,46,1,0,0,0,50,12,1,0,0,0,51,53,8,1,0,0,52,51,1,0,0,0,
        53,54,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,14,1,0,0,0,56,65,5,
        39,0,0,57,64,3,15,7,0,58,60,8,2,0,0,59,58,1,0,0,0,60,61,1,0,0,0,
        61,59,1,0,0,0,61,62,1,0,0,0,62,64,1,0,0,0,63,57,1,0,0,0,63,59,1,
        0,0,0,64,67,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,68,1,0,0,0,67,
        65,1,0,0,0,68,69,5,39,0,0,69,16,1,0,0,0,70,79,5,34,0,0,71,78,3,17,
        8,0,72,74,8,3,0,0,73,72,1,0,0,0,74,75,1,0,0,0,75,73,1,0,0,0,75,76,
        1,0,0,0,76,78,1,0,0,0,77,71,1,0,0,0,77,73,1,0,0,0,78,81,1,0,0,0,
        79,77,1,0,0,0,79,80,1,0,0,0,80,82,1,0,0,0,81,79,1,0,0,0,82,83,5,
        34,0,0,83,18,1,0,0,0,84,88,5,96,0,0,85,87,8,4,0,0,86,85,1,0,0,0,
        87,90,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,88,1,
        0,0,0,91,92,5,96,0,0,92,20,1,0,0,0,93,95,7,5,0,0,94,93,1,0,0,0,95,
        96,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,98,1,0,0,0,98,99,6,10,
        0,0,99,22,1,0,0,0,12,0,34,49,54,61,63,65,75,77,79,88,96,1,6,0,0
    ]

class ShellGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    WHITESPACE = 5
    APPLICATION = 6
    UNQUOTED = 7
    SINGLE_QUOTED = 8
    DOUBLE_QUOTED = 9
    BACK_QUOTED = 10
    WS = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'<'", "'>'", "'|'" ]

    symbolicNames = [ "<INVALID>",
            "WHITESPACE", "APPLICATION", "UNQUOTED", "SINGLE_QUOTED", "DOUBLE_QUOTED", 
            "BACK_QUOTED", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "WHITESPACE", "APPLICATION", 
                  "UNQUOTED", "SINGLE_QUOTED", "DOUBLE_QUOTED", "BACK_QUOTED", 
                  "WS" ]

    grammarFileName = "ShellGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


